"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEventSigningTransformStream = void 0;
const util_hex_encoding_1 = require("@smithy/util-hex-encoding");
const getEventSigningTransformStream = (initialSignature, messageSigner, eventStreamCodec) => {
    let priorSignature = initialSignature;
    const transformer = {
        start() { },
        async transform(chunk, controller) {
            try {
                const now = new Date();
                const dateHeader = {
                    ":date": { type: "timestamp", value: now },
                };
                const signedMessage = await messageSigner.sign({
                    message: {
                        body: chunk,
                        headers: dateHeader,
                    },
                    priorSignature: priorSignature,
                }, {
                    signingDate: now,
                });
                priorSignature = signedMessage.signature;
                const serializedSigned = eventStreamCodec.encode({
                    headers: {
                        ...dateHeader,
                        ":chunk-signature": {
                            type: "binary",
                            value: (0, util_hex_encoding_1.fromHex)(signedMessage.signature),
                        },
                    },
                    body: chunk,
                });
                controller.enqueue(serializedSigned);
            }
            catch (error) {
                controller.error(error);
            }
        },
    };
    return new TransformStream({ ...transformer });
};
exports.getEventSigningTransformStream = getEventSigningTransformStream;
