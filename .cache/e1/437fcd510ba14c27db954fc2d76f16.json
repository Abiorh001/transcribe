{"id":"node_modules/microphone-stream/dist/microphone-stream.js","dependencies":[{"name":"C:\\Users\\Abiola\\OneDrive\\Documents\\index\\package.json","includedInParent":true,"mtime":1705339673151},{"name":"C:\\Users\\Abiola\\OneDrive\\Documents\\index\\node_modules\\microphone-stream\\package.json","includedInParent":true,"mtime":1705305625488},{"name":"readable-stream","loc":{"line":19,"column":32,"index":857},"parent":"C:\\Users\\Abiola\\OneDrive\\Documents\\index\\node_modules\\microphone-stream\\dist\\microphone-stream.js","resolved":"C:\\Users\\Abiola\\OneDrive\\Documents\\index\\node_modules\\readable-stream\\readable-browser.js"},{"name":"buffer-from","loc":{"line":22,"column":44,"index":1065},"parent":"C:\\Users\\Abiola\\OneDrive\\Documents\\index\\node_modules\\microphone-stream\\dist\\microphone-stream.js","resolved":"C:\\Users\\Abiola\\OneDrive\\Documents\\index\\node_modules\\buffer-from\\index.js"}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar readable_stream_1 = require(\"readable-stream\");\n// some versions of the buffer browser lib don't support Buffer.from (such as the one included by the\n// current version of express-browserify)\nvar buffer_from_1 = __importDefault(require(\"buffer-from\"));\n/**\n * Turns a MediaStream object (from getUserMedia) into a Node.js Readable stream\n * and optionally converts the audio to Buffers\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia\n */\nvar MicrophoneStream = /** @class */ (function (_super) {\n    __extends(MicrophoneStream, _super);\n    /**\n     * Turns a MediaStream object (from getUserMedia) into a Node.js Readable stream\n     * and optionally converts the audio to Buffers\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia\n     *\n     * @param {Object} [opts] options\n     * @param {MediaStream} [opts.stream] https://developer.mozilla.org/en-US/docs/Web/API/MediaStream - for iOS compatibility, it is recommended that you create the MicrophoneStream instance in response to the tap - before you have a MediaStream, and then later call setStream() with the MediaStream.\n     * @param {Boolean} [opts.objectMode=false] Puts the stream into ObjectMode where it emits AudioBuffers instead of Buffers - see https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer\n     * @param {Number|null} [opts.bufferSize=null] https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor\n     * @param {AudioContext} [opts.context] - AudioContext - will be automatically created if not passed in\n     * @constructor\n     */\n    function MicrophoneStream(opts) {\n        if (opts === void 0) { opts = { objectMode: false }; }\n        var _this = _super.call(this, { objectMode: opts.objectMode }) || this;\n        _this.audioInput = null;\n        _this.recording = true;\n        var stream = opts.stream, objectMode = opts.objectMode, bufferSize = opts.bufferSize, context = opts.context;\n        _this.objectMode = objectMode;\n        // \"It is recommended for authors to not specify this buffer size and allow the implementation\n        // to pick a good buffer size to balance between latency and audio quality.\"\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor\n        // however, webkitAudioContext (safari) requires it to be set'\n        // Possible values: null, 256, 512, 1024, 2048, 4096, 8192, 16384\n        _this.bufferSize =\n            bufferSize || typeof window.AudioContext === \"undefined\" ? 4096 : null;\n        // @ts-expect-error Property 'webkitAudioContext' does not exist on type 'Window & typeof globalThis'\n        var AudioContext = window.AudioContext || window.webkitAudioContext;\n        _this.context = context || new AudioContext();\n        // We can only emit one channel's worth of audio, so only one input.\n        // (Who has multiple microphones anyways?)\n        var inputChannels = 1;\n        // We shouldn't need any output channels (going back to the browser),\n        // but chrome is buggy and won't give us any audio without one.\n        var outputChannels = 1;\n        _this.recorder = _this.context.createScriptProcessor(bufferSize, inputChannels, outputChannels);\n        // Other half of workaround for chrome bugs.\n        _this.recorder.connect(_this.context.destination);\n        if (stream) {\n            _this.setStream(stream);\n        }\n        setTimeout(function () {\n            _this.emit(\"format\", {\n                channels: 1,\n                bitDepth: 32,\n                sampleRate: _this.context.sampleRate,\n                signed: true,\n                float: true,\n            });\n        }, 0);\n        return _this;\n    }\n    /**\n     * Sets the MediaStream.\n     *\n     * This was separated from the constructor to enable better compatibility with Safari on iOS 11.\n     *\n     * Typically the stream is only available asynchronously, but the context must be created or\n     * resumed directly in response to a user's tap on iOS.\n     *\n     * @param {MediaStream} stream https://developer.mozilla.org/en-US/docs/Web/API/MediaStream\n     * @type {function(MediaStream): void}\n     */\n    MicrophoneStream.prototype.setStream = function (stream) {\n        var _this = this;\n        this.stream = stream;\n        this.audioInput = this.context.createMediaStreamSource(stream);\n        this.audioInput.connect(this.recorder);\n        /**\n         * Convert and emit the raw audio data\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/onaudioprocess\n         * @param {AudioProcessingEvent} e https://developer.mozilla.org/en-US/docs/Web/API/AudioProcessingEvent\n         */\n        var recorderProcess = function (e) {\n            // onaudioprocess can be called at least once after we've stopped\n            if (_this.recording) {\n                _this.push(_this.objectMode\n                    ? e.inputBuffer\n                    : buffer_from_1.default(e.inputBuffer.getChannelData(0).buffer));\n            }\n        };\n        this.recorder.onaudioprocess = recorderProcess;\n    };\n    /**\n     * Temporarily stop emitting new data. Audio data recieved from the microphone\n     * after this will be dropped.\n     *\n     * Note: the underlying Stream interface has a .pause() API that causes new data\n     * to bebuffered rather than dropped.\n     */\n    MicrophoneStream.prototype.pauseRecording = function () {\n        this.recording = false;\n    };\n    /**\n     * Resume emitting new audio data after pauseRecording() was called.\n     */\n    MicrophoneStream.prototype.playRecording = function () {\n        this.recording = true;\n    };\n    /**\n     * Stops the recording.\n     *\n     * Note: Some versions of Firefox leave the recording icon in place after recording has stopped.\n     */\n    MicrophoneStream.prototype.stop = function () {\n        if (this.context.state === \"closed\") {\n            return;\n        }\n        try {\n            this.stream.getTracks()[0].stop();\n        }\n        catch (ex) {\n            // This fails in some older versions of chrome. Nothing we can do about it.\n        }\n        this.recorder.disconnect();\n        if (this.audioInput) {\n            this.audioInput.disconnect();\n        }\n        try {\n            this.context.close(); // returns a promise;\n        }\n        catch (ex) {\n            // this can also fail in older versions of chrome\n        }\n        this.recording = false;\n        this.push(null);\n        this.emit(\"close\");\n    };\n    /**\n     * no-op, (flow-control doesn't really work on live audio)\n     */\n    MicrophoneStream.prototype._read = function ( /* bytes */) {\n        // no-op, (flow-control doesn't really work on live audio)\n    };\n    /**\n     * Converts a Buffer back into the raw Float32Array format that browsers use.\n     * Note: this is just a new DataView for the same underlying buffer -\n     * the actual audio data is not copied or changed here.\n     *\n     * @memberof MicrophoneStream\n     * @param {Buffer} chunk node-style buffer of audio data from a 'data' event or read() call\n     * @return {Float32Array} raw 32-bit float data view of audio data\n     */\n    MicrophoneStream.toRaw = function (chunk) {\n        return new Float32Array(chunk.buffer);\n    };\n    return MicrophoneStream;\n}(readable_stream_1.Readable));\nexports.default = MicrophoneStream;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/microphone-stream/dist/microphone-stream.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}}],"sources":{"node_modules/microphone-stream/dist/microphone-stream.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar readable_stream_1 = require(\"readable-stream\");\n// some versions of the buffer browser lib don't support Buffer.from (such as the one included by the\n// current version of express-browserify)\nvar buffer_from_1 = __importDefault(require(\"buffer-from\"));\n/**\n * Turns a MediaStream object (from getUserMedia) into a Node.js Readable stream\n * and optionally converts the audio to Buffers\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia\n */\nvar MicrophoneStream = /** @class */ (function (_super) {\n    __extends(MicrophoneStream, _super);\n    /**\n     * Turns a MediaStream object (from getUserMedia) into a Node.js Readable stream\n     * and optionally converts the audio to Buffers\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia\n     *\n     * @param {Object} [opts] options\n     * @param {MediaStream} [opts.stream] https://developer.mozilla.org/en-US/docs/Web/API/MediaStream - for iOS compatibility, it is recommended that you create the MicrophoneStream instance in response to the tap - before you have a MediaStream, and then later call setStream() with the MediaStream.\n     * @param {Boolean} [opts.objectMode=false] Puts the stream into ObjectMode where it emits AudioBuffers instead of Buffers - see https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer\n     * @param {Number|null} [opts.bufferSize=null] https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor\n     * @param {AudioContext} [opts.context] - AudioContext - will be automatically created if not passed in\n     * @constructor\n     */\n    function MicrophoneStream(opts) {\n        if (opts === void 0) { opts = { objectMode: false }; }\n        var _this = _super.call(this, { objectMode: opts.objectMode }) || this;\n        _this.audioInput = null;\n        _this.recording = true;\n        var stream = opts.stream, objectMode = opts.objectMode, bufferSize = opts.bufferSize, context = opts.context;\n        _this.objectMode = objectMode;\n        // \"It is recommended for authors to not specify this buffer size and allow the implementation\n        // to pick a good buffer size to balance between latency and audio quality.\"\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor\n        // however, webkitAudioContext (safari) requires it to be set'\n        // Possible values: null, 256, 512, 1024, 2048, 4096, 8192, 16384\n        _this.bufferSize =\n            bufferSize || typeof window.AudioContext === \"undefined\" ? 4096 : null;\n        // @ts-expect-error Property 'webkitAudioContext' does not exist on type 'Window & typeof globalThis'\n        var AudioContext = window.AudioContext || window.webkitAudioContext;\n        _this.context = context || new AudioContext();\n        // We can only emit one channel's worth of audio, so only one input.\n        // (Who has multiple microphones anyways?)\n        var inputChannels = 1;\n        // We shouldn't need any output channels (going back to the browser),\n        // but chrome is buggy and won't give us any audio without one.\n        var outputChannels = 1;\n        _this.recorder = _this.context.createScriptProcessor(bufferSize, inputChannels, outputChannels);\n        // Other half of workaround for chrome bugs.\n        _this.recorder.connect(_this.context.destination);\n        if (stream) {\n            _this.setStream(stream);\n        }\n        setTimeout(function () {\n            _this.emit(\"format\", {\n                channels: 1,\n                bitDepth: 32,\n                sampleRate: _this.context.sampleRate,\n                signed: true,\n                float: true,\n            });\n        }, 0);\n        return _this;\n    }\n    /**\n     * Sets the MediaStream.\n     *\n     * This was separated from the constructor to enable better compatibility with Safari on iOS 11.\n     *\n     * Typically the stream is only available asynchronously, but the context must be created or\n     * resumed directly in response to a user's tap on iOS.\n     *\n     * @param {MediaStream} stream https://developer.mozilla.org/en-US/docs/Web/API/MediaStream\n     * @type {function(MediaStream): void}\n     */\n    MicrophoneStream.prototype.setStream = function (stream) {\n        var _this = this;\n        this.stream = stream;\n        this.audioInput = this.context.createMediaStreamSource(stream);\n        this.audioInput.connect(this.recorder);\n        /**\n         * Convert and emit the raw audio data\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/onaudioprocess\n         * @param {AudioProcessingEvent} e https://developer.mozilla.org/en-US/docs/Web/API/AudioProcessingEvent\n         */\n        var recorderProcess = function (e) {\n            // onaudioprocess can be called at least once after we've stopped\n            if (_this.recording) {\n                _this.push(_this.objectMode\n                    ? e.inputBuffer\n                    : buffer_from_1.default(e.inputBuffer.getChannelData(0).buffer));\n            }\n        };\n        this.recorder.onaudioprocess = recorderProcess;\n    };\n    /**\n     * Temporarily stop emitting new data. Audio data recieved from the microphone\n     * after this will be dropped.\n     *\n     * Note: the underlying Stream interface has a .pause() API that causes new data\n     * to bebuffered rather than dropped.\n     */\n    MicrophoneStream.prototype.pauseRecording = function () {\n        this.recording = false;\n    };\n    /**\n     * Resume emitting new audio data after pauseRecording() was called.\n     */\n    MicrophoneStream.prototype.playRecording = function () {\n        this.recording = true;\n    };\n    /**\n     * Stops the recording.\n     *\n     * Note: Some versions of Firefox leave the recording icon in place after recording has stopped.\n     */\n    MicrophoneStream.prototype.stop = function () {\n        if (this.context.state === \"closed\") {\n            return;\n        }\n        try {\n            this.stream.getTracks()[0].stop();\n        }\n        catch (ex) {\n            // This fails in some older versions of chrome. Nothing we can do about it.\n        }\n        this.recorder.disconnect();\n        if (this.audioInput) {\n            this.audioInput.disconnect();\n        }\n        try {\n            this.context.close(); // returns a promise;\n        }\n        catch (ex) {\n            // this can also fail in older versions of chrome\n        }\n        this.recording = false;\n        this.push(null);\n        this.emit(\"close\");\n    };\n    /**\n     * no-op, (flow-control doesn't really work on live audio)\n     */\n    MicrophoneStream.prototype._read = function ( /* bytes */) {\n        // no-op, (flow-control doesn't really work on live audio)\n    };\n    /**\n     * Converts a Buffer back into the raw Float32Array format that browsers use.\n     * Note: this is just a new DataView for the same underlying buffer -\n     * the actual audio data is not copied or changed here.\n     *\n     * @memberof MicrophoneStream\n     * @param {Buffer} chunk node-style buffer of audio data from a 'data' event or read() call\n     * @return {Float32Array} raw 32-bit float data view of audio data\n     */\n    MicrophoneStream.toRaw = function (chunk) {\n        return new Float32Array(chunk.buffer);\n    };\n    return MicrophoneStream;\n}(readable_stream_1.Readable));\nexports.default = MicrophoneStream;\n"},"lineCount":181}},"error":null,"hash":"7cbf23a83468474cccf0c4e564376847","cacheData":{"env":{}}}